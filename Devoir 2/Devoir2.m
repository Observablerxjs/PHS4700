function [coup vf t rbt ] = Devoir2(option,xy0,vb0,wb0)    options = {@Option1,@Option2,@Option3};  func = options{option};  dt = 0.0001;    T = 0;    vitesse = vb0;    m = 0.0459;    r = 0.02135;    pos = [xy0(1), xy0(2), r];      coup = -1;    rbt = [pos];  t = [0];      while (coup == -1)            [vitesse pos] = RungeKutta(vitesse,pos, wb0,dt,m,r,func);        T = T + dt;        t = [t T];    rbt = [rbt; pos];        coup = VerifierConditions(pos,vitesse);  end  vf = vitesse; endfunctionfunction [a] = Option1(vitesse,wb0,m,r)  a = [0,0,-9.8]';endfunctionfunction [a] = Option2(vitesse,wb0,m,r)    gravite = [0,0,-9.8]';    p = 1.2;  Cv = 0.14;  A = pi*(r)^2;  friction = - (p*Cv*A/2) * norm(vitesse) * vitesse;    a = gravite + friction;  
endfunctionfunction [a] = Option3(vitesse,wb0,m,r)    gravite = [0,0,-9.8]';    p = 1.2;  Cv = 0.14;  A = pi*(r)^2;  friction = - (p*Cv*A/2) * norm(vitesse) * vitesse;    p = 1.2;  Cm = 0.000791 * norm(wb0);  A = pi*(r)^2;  wxb = cross(wb0,vitesse);    Magnus = ((p*Cm*A)/2) * (norm(vitesse))^2 * (wxb/norm(wxb));    a = gravite + friction + Magnus;  endfunctionfunction [vitesse position] = RungeKutta ( v, pos, w, dt, m, r, fnc )     k1 = feval(fnc , v , w, m, r ) ;  k2 = feval(fnc , v + (k1*dt/2) , w, m, r) ;  k3 = feval(fnc , v + (k2*dt/2) , w, m, r) ;  k4 = feval(fnc , v + (k3*dt) , w, m, r) ;  vitesse = v + (( k1 + 2*k2 + 2*k3 + k4 )*(dt/6));    position = pos + vitesse'*dt;  endfunction